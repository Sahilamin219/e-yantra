//Dont change the name of following functions


#include "CB_Task_1_Sandbox.h"


/*
*
* Function Name: forward_wls
* Input: node
* Output: void
* Logic: Uses white line sensors to go forward by the number of nodes specified
* Example Call: forward_wls(2); //Goes forward by two nodes
*
*/
void forward_wls(unsigned char node)
{
	int n;n = node;
	int l, m, r;
	l = ADC_Conversion(1);
	m = ADC_Conversion(2);
	r = ADC_Conversion(3);
	for(int i=0;i<n;i++)
	{ 
		while (1)
		{

			l = ADC_Conversion(1);
			m = ADC_Conversion(2);
			r = ADC_Conversion(3);
			printf("%d %d %d \n", l, m, r);
			{
				if (m != 0 && l == 0 && r == 0)
				{
					forward();
				}
				else if (l != 0 && m == 0 && r == 0)
				{
					velocity(150, 255);
				}
				else if (l == 0 && m == 0 && r != 0)
				{
					velocity(255, 150);
				}
				else if (l != 0 && m != 0 && r == 0)
				{
					velocity(150, 255);
				}
				else if (l == 0 && m != 0 && r != 0)
				{
					velocity(255, 150);
				}
				else if (l != 0 && m != 0 && r != 0)
				{
					forward();
					_delay_ms(175);
					break;


				}
				else
				{


				}
			}
		}
	}


}
/*
*
* Function Name: left_turn_wls
* Input: void
* Output: void
* Logic: Uses white line sensors to turn left until black line is encountered
* Example Call: left_turn_wls(); //Turns right until black line is encountered
*
*/
void left_turn_wls(void)
{
	int l, m, r;
	l = ADC_Conversion(1);
	m = ADC_Conversion(2);
	r = ADC_Conversion(3);
	while (1)
	{
		printf("nash");
		l = ADC_Conversion(1);
		m = ADC_Conversion(2);
		r = ADC_Conversion(3);
		printf("%d %d %d", l, m, r);
		if ((l != 0 && m != 0 && r == 0) || (l != 0 && m == 0 && r == 0) || (l == 0 && m == 0 && r == 0))
		{
			left();

		}
		else if(m!=0&&l==0&&r==0)
		{
			stop();
			break;
		}
		else
		{

		}

	}
}

/*
*
* Function Name: right_turn_wls
* Input: void
* Output: void
* Logic: Uses white line sensors to turn right until black line is encountered
* Example Call: right_turn_wls(); //Turns right until black line is encountered
*/
void right_turn_wls(void)
{
	int l, m, r;
	l = ADC_Conversion(1);
	m = ADC_Conversion(2);
	r = ADC_Conversion(3);
	while (1)
	{
		l = ADC_Conversion(1);
		m = ADC_Conversion(2);
		r = ADC_Conversion(3);
		if ((l == 0 && r == 0 && m == 0)||(l==0&&m==0&&r!=0)||(l==0&&m!=0&&r!=0))
		{
			right();
		}
		else if(l==0&&m!=0&&r==0)
		{
			stop();
			break;
		}
		else
		{

		}
	}
}

/*
*
* Function Name: e_shape
* Input: void
* Output: void
* Logic: Use this function to make the robot trace a e shape path on the arena
* Example Call: e_shape();
*/
void e_shape(void)
{

	forward_wls(1);
     right_turn_wls();
	forward_wls(2);
	right_turn_wls();
	forward_wls(1);
	right_turn_wls();
	forward_wls(1);
	right_turn_wls();
	forward_wls(1);
	
	



}


/*
*
* Function Name: Task_1_1
* Input: voidnt a, b, c;
	a = ADC_Conversion(1);
	b = ADC_Conversion(2);
	c = ADC_Conversion(3);
	while (1)
	{
		if (a == 0 && b != 0 && c == 0)
		{
			//std::cout << "Forward";
			forward();
		}
		else
		{
			back();
		}
* Output: void
* Logic: Use this function to encapsulate your Task 1.1 logic
* Example Call: Task_1_1();
*/
void Task_1_1(void)
{

	forward_wls(1);
	right_turn_wls();
	forward_wls(4);
	left_turn_wls();
	forward_wls(1);
	left_turn_wls();
	forward_wls(1);
	left_turn_wls();
	forward_wls(1);
	forward_wls(1);
	velocity(100,255);
	_delay_ms(500);
	forward_wls(1);



}

/*
*
* Function Name: Task_1_2
* Input: void
* Output: void
* Logic: Use this function to encapsulate your Task 1.2 logic
* Example Call: Task_1_2();
*/
void Task_1_2(void)
{
	//write your task 1.2 logic here
