//You are allowed to define your own function to fulfill the requirement of tasks
//Dont change the name of following functions
#include "CB_Task_1_Sandbox.h"
#include<vector> 
#include<iostream>
#include <queue> 
#include<list>
#define V 31
using namespace std;
/*
*
* Function Name: forward_wls
* Input: node
* Output: void
* Logic: Uses white line sensors to go forward by the number of nodes specified
* Example Call: forward_wls(2); //Goes forward by two nodes
*
*/

void forward_wls(unsigned char node) {
	unsigned char ls = 1, cs = 1, rs = 1, fs = 1,ps=1;
	int a = 0;
	int flag = 0;
	int node_count = 0;
	int tmp_node = 0;
	int isBotOnNode = 0;
	int isBotOnLine = 0;
	while (a == 0) {
		ls = ADC_Conversion(1);
		cs = ADC_Conversion(2);
		rs = ADC_Conversion(3);
		ps = ADC_Conversion(4);
		if ((ls == 0 && rs == 0 && cs == 255)) {
			forward();
			if (flag == 1) { isBotOnNode = 0; }
		}
		else if (ls == 255 && rs == 0 && cs == 255) {
			soft_left();
			printf("soft left1");
			if (flag == 1) { isBotOnNode = 0; }

		}
		else if (ls == 255 && rs == 0 && cs == 0) {
			soft_left();
			if (flag == 1) { isBotOnNode = 0; }
			printf("soft left2");
		}
		else if (ls == 0 && rs == 255 && cs == 255) {
			soft_right();
			if (flag == 1) { isBotOnNode = 0; }
			printf("soft right1");

		}
		else if (ls == 0 && rs == 255 && cs == 0) {
			soft_right();
			if (flag == 1) { isBotOnNode = 0; }
			printf("soft right2");
		}
		else if (ls == 255 && rs == 255 && cs == 255) {
			isBotOnNode = 1;
		}
		else if (ls == 0 && rs == 0 && cs == 0) {
			flag = 0;
			isBotOnNode = 0;
		}
		if (isBotOnNode == 1 && flag == 0) { node_count++; flag = 1; }
		printf("\n%d %d %d %d___%d__", ls, cs, rs, node_count,ps);
		if (node_count == node) { stop(); break; }
		_delay_ms(10);
	}
}
/*
*
* Function Name: left_turn_wls
* Input: void
* Output: void
* Logic: Uses white line sensors to turn left until black line is encountered
* Example Call: left_turn_wls(); //Turns right until black line is encountered
*
*/
void left_turn_wls(void) {
	int a = 0;
	unsigned char ls = 1, cs = 1, rs = 1, fs = 1, ps = 1;
	while (a == 0) {
		left();
		velocity(100, 255);
		ls = ADC_Conversion(1);
		cs = ADC_Conversion(2);
		rs = ADC_Conversion(3);
		ps = ADC_Conversion(4);
		if (ls == 0 && cs == 255 && rs == 0) { break; }
		printf("\n%d %d %d___%d__", ls, cs, rs, ps);
		_delay_ms(10);
	}
}
/*
*
* Function Name: right_turn_wls
* Input: void
* Output: void
* Logic: Uses white line sensors to turn right until black line is encountered
* Example Call: right_turn_wls(); //Turns right until black line is encountered
*/
void right_turn_wls(void) {
	int a = 0;
	unsigned char ls = 1, cs = 1, rs = 1, fs = 1, ps = 1;

	while (a == 0) {
		right();
		velocity(255, 100);
		ls = ADC_Conversion(1);
		cs = ADC_Conversion(2);
		rs = ADC_Conversion(3);
		ps = ADC_Conversion(4);
		if (ls == 0 && cs == 255 && rs == 0) { break; }
		printf("\n%d %d %d___%d", ls, cs, rs, ps);
		_delay_ms(10);
	}
}
/*
*
* Function Name: whiteLine
* Input: void
* Output: void
* Logic: Uses white line sensors to go forward
* Example Call: whiteLine(); //Goes forward on white line
*
*/
void whiteLine() {
	unsigned char ls = 1, cs = 1, rs = 1, fs = 1;
	int a = 0;
	while (a == 0) {
		ls = ADC_Conversion(1);
		cs = ADC_Conversion(2);
		rs = ADC_Conversion(3);
		if ((ls == 255 && rs == 255 && cs == 0)) {
			forward();
		}
		else if (ls == 0 && rs == 255 && cs == 255) {
			soft_left();
			//printf("soft left2");
		}
		else if (ls == 255 && rs == 0 && cs == 255) {
			soft_right();
			//printf("soft right2");
		}
		else if (ls == 0 && rs == 0 && cs == 255) {
			break;
		}
		_delay_ms(1);
		//printf("\n%d %d %d", ls, cs, rs);
	}
}
/*
*
* Function Name: zigZag
* Input: void
* Output: void
* Logic: 
* Example Call: zigZag(); //
*
*/
void zigZag() {
	unsigned char ls = 1, cs = 1, rs = 1, fs = 1;
	int a = 0;
	while (a == 0) {
		ls = ADC_Conversion(1);
		cs = ADC_Conversion(2);
		rs = ADC_Conversion(3);
		if ((ls == 0 && rs == 0 && cs == 255)) {
			forward();
		}
		else if (ls == 255 && rs == 0 && cs == 255) {
			soft_left();
			printf("soft left1");
		}
		else if (ls == 255 && rs == 0 && cs == 0) {
			soft_left();
			printf("soft left2");
		}
		else if (ls == 0 && rs == 255 && cs == 255) {
			soft_right();
			printf("soft right1");
		}
		else if (ls == 0 && rs == 255 && cs == 0) {
			soft_right();
			printf("soft right2");
		}else if (ls == 255 && rs == 255 && cs == 255) {
			break;
		}
		_delay_ms(10);
	}
}
/*
*
* Function Name: final_destination()
* Input: void
* Output: void
* Logic:
* Example Call: final_destination(); //
*
*/
void final_destination() {
	unsigned char ls = 1, cs = 1, rs = 1, fs = 1;
	int a = 0;
	while (a == 0) {
		ls = ADC_Conversion(1);
		cs = ADC_Conversion(2);
		rs = ADC_Conversion(3);
		if (ls == 255 && cs == 255 && rs == 255) {
			printf("finalssssss;");
			//stop();
			break;
		}
		_delay_ms(10);
	}
}
/*
*
* Function Name: e_shape
* Input: void
* Output: void
* Logic: Use this function to make the robot trace a e shape path on the arena
* Example Call: e_shape();
*/
void e_shape(void) {	
}

/*
*
* Function Name: Task_1_1
* Input: void
* Output: void
* Logic: Use this function to encapsulate your Task 1.1 logic
* Example Call: Task_1_1();
*/
void Task_1_1(void){
	forward_wls(1);
		right_turn_wls();
	forward_wls(4);
		left_turn_wls();
	forward_wls(1);
		left_turn_wls();
	forward_wls(1);
		right_turn_wls();
	forward_wls(1);
		left_turn_wls();
	forward_wls(1);
		right_turn_wls();
	zigZag();
		left_turn_wls();
	forward_wls(1);
		right_turn_wls();
	forward_wls(1);
		left_turn_wls();
	forward_wls(1);


		right_turn_wls();
	forward_wls(1);
	whiteLine();
	forward_wls(1);
		right_turn_wls();
	forward_wls(1);
		left_turn_wls();
	forward_wls(1);
	
}

/*
*
* Function Name: Task_1_2
* Input: void
* Output: void
* Logic: Use this function to encapsulate your Task 1.2 logic
* Example Call: Task_1_2();
*/
/**/
void add_edge(vector<int> adj[], int src, int dest) {
	adj[src].push_back(dest);
	adj[dest].push_back(src);
}
bool BFS(vector<int> adj[], int src, int dest, int v,
	int pred[], int dist[])
{
	// a queue to maintain queue of vertices whose 
	// adjacency list is to be scanned as per normal 
	// DFS algorithm 
	list<int> queue;

	// boolean array visited[] which stores the 
	// information whether ith vertex is reached 
	// at least once in the Breadth first search 
	bool visited[V];

	// initially all vertices are unvisited 
	// so v[i] for all i is false 
	// and as no path is yet constructed 
	// dist[i] for all i set to infinity 
	for (int i = 0; i < v; i++) {
		visited[i] = false;
		dist[i] = INT_MAX;
		pred[i] = -1;
	}

	// now source is first to be visited and 
	// distance from source to itself should be 0 
	visited[src] = true;
	dist[src] = 0;
	queue.push_back(src);

	// standard BFS algorithm 
	while (!queue.empty()) {
		int u = queue.front();
		queue.pop_front();
		for (int i = 0; i < adj[u].size(); i++) {
			if (visited[adj[u][i]] == false) {
				visited[adj[u][i]] = true;
				dist[adj[u][i]] = dist[u] + 1;
				pred[adj[u][i]] = u;
				queue.push_back(adj[u][i]);

				// We stop BFS when we find 
				// destination. 
				if (adj[u][i] == dest)
					return true;
			}
		}
	}

	return false;
}

// utility function to print the shortest distance  
// between source vertex and destination vertex 
void printShortestDistance(vector<int> adj[], int s, int dest, int v, vector<int>& tmp)
{
	// predecessor[i] array stores predecessor of 
	// i and distance array stores distance of i 
	// from s 
	int pred[V], dist[V];

	if (BFS(adj, s, dest, v, pred, dist) == false)
	{
		//cout << "Given source and destination"
			//<< " are not connected";
		return;
	}

	// vector path stores the shortest path 
	vector<int> path;
	int crawl = dest;
	path.push_back(crawl);
	while (pred[crawl] != -1) {
		path.push_back(pred[crawl]);
		crawl = pred[crawl];
	}

	// distance from source is in distance array 
	//cout << "Shortest path length is : "
		//<< dist[dest];

	// printing path from source to destination 
	//cout << "\nPath is::\n";
	//for (int i = path.size() - 1; i >= 0; i--)
		//cout << path[i] << " ";
	//tmp.push_back(30);
	tmp = path;
}
int bd=3;
vector<int> adj[V];
vector<int> tmp;
void go_to(int source, int dest) {
	int i;
	//bd: bot direction;
	int dir;// next bot direction
	printShortestDistance(adj, dest, source, V, tmp);
	cout << "nodes: ";
	for (i = 0; i < tmp.size(); i++) {
		cout << tmp[i] << "->";
	}
	cout << "\n";
	cout << "called functions: ";
	for (i = 0; i < tmp.size() - 1; i++) {
		if ((tmp[i + 1] - tmp[i]) > 1) { dir = 1; }
		else if ((tmp[i + 1] - tmp[i]) < -1) { dir = 3; }
		else if ((tmp[i + 1] - tmp[i]) == 1) { dir = 4; }
		else if ((tmp[i + 1] - tmp[i]) == -1) { dir = 2; }
if ((dir - bd) >= 1) {
			/*
			for (int k = 0; k < (dir - bd); k++) {
				cout << "right()-> ";
			}
			*/
			if((dir-bd)==1){right_turn_wls();}
			else if((dir-bd)==3){left_turn_wls();}
			else if((dir - bd) == 2) { right_turn_wls(); right_turn_wls();}
			
			bd = dir;
		}
		else if ((dir - bd) == 0) {
			//nothing
		}else{
			/*
			for (int k = 0; k < (bd-dir); k++) {
				cout << "left()-> ";
			}
			*/
			if((dir-bd)==-3){right_turn_wls();}
			else if((dir-bd)==-1){left_turn_wls();}
			else if ((dir - bd) == -2) { right_turn_wls(); right_turn_wls(); }
//			cout<<"_"<<dir-bd<<"_";
			bd = dir;
		}
		cout << "forward_oneNode()-> ";
		forward_wls(1);
		/*
		if ((tmp[i + 1] - tmp[i]) > 1) { cout << "up->"; }
		else if ((tmp[i + 1] - tmp[i]) < -1) { cout << "down->"; }
		else if ((tmp[i + 1] - tmp[i]) == 1) { cout << "left->"; }
		else if ((tmp[i + 1] - tmp[i]) == -1) { cout << "right->"; }
		*/
	}
}
void Task_1_2(void){
	
	forward_wls(1);

	int map[7][7] = {
		{0,30,0,0,0,29,0},
		{28,27,36,0,0,25,24},
		{23,22,0,0,0,21,20},
		{19,18,17,0,16,15,14},
		{13,12,0,0,0,11,10},
		{9,8,7,0,6,5,4},
		{0,3,0,2,0,1,0},
	};
	add_edge(adj, 1, 2);
	add_edge(adj, 2, 3);
	add_edge(adj, 3, 8);
	add_edge(adj, 8, 12);
	add_edge(adj, 12, 18);
	add_edge(adj, 18, 22);
	add_edge(adj, 22, 27);
	add_edge(adj, 27, 30);
	add_edge(adj, 30, 29);
	add_edge(adj, 29, 25);
	add_edge(adj, 25, 21);
	add_edge(adj, 21, 15);
	add_edge(adj, 15, 11);
	add_edge(adj, 11, 5);
	add_edge(adj, 5, 1);
	add_edge(adj, 8, 9);
	add_edge(adj, 8, 7);
	add_edge(adj, 12, 13);
	add_edge(adj, 18, 19);
	add_edge(adj, 18, 17);
	add_edge(adj, 22, 23);
	add_edge(adj, 27, 28);
	add_edge(adj, 27, 26);
	add_edge(adj, 30, 29);
	add_edge(adj, 25, 24);
	add_edge(adj, 21, 20);
	add_edge(adj, 15, 14);
	add_edge(adj, 15, 16);
	add_edge(adj, 11, 10);
	add_edge(adj, 5, 6);
	add_edge(adj, 5, 4);
	add_edge(adj, 12, 11);
	add_edge(adj, 22, 21);
	//shortestPath(adj, 31, 3,1);
	//u-1,r-2,d-3,l-4
	go_to(2, 9);
	go_to(9,11);
	//go_to(9,11);	
}
